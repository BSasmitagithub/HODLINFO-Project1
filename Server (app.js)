const express = require('express');
const pg = require('pg');
const dotenv = require('dotenv');
dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Database Connection
const pool = new pg.Pool({
    connectionString: process.env.DATABASE_URL,
});

// Test database connection
pool.query('SELECT NOW()', (err, result) => {
    if (err) {
        console.error('Error connecting to database', err);
    } else {
        console.log('Database connected successfully!', result.rows[0].now);
    }
});

// Define API route to fetch data from the database
app.get('/api/cryptodata', async (req, res) => {
    try {
        // Fetch top 10 results from the database
        const data = await pool.query('SELECT * FROM crypto_data ORDER BY last DESC LIMIT 10');
        res.json(data.rows);
    } catch (error) {
        console.error('Error fetching data:', error);
        res.status(500).json({ error: 'Failed to fetch data' });
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server listening on port ${port}`);
});

// Function to fetch data from WazirX API and store in the database
async function fetchAndStoreData() {
    try {
        const response = await fetch('https://api.wazirx.com/api/v2/tickers');
        const data = await response.json();

        // Extract relevant data from API response
        const top10Data = Object.entries(data).slice(0, 10).map(([name, ticker]) => ({
            name: name,
            last: ticker.last,
            buy: ticker.buy,
            sell: ticker.sell,
            volume: ticker.volume,
            base_unit: ticker.base_unit,
        }));

        // Insert data into the database
        for (const cryptoData of top10Data) {
            await pool.query(
                'INSERT INTO crypto_data (name, last, buy, sell, volume, base_unit) VALUES ($1, $2, $3, $4, $5, $6)',
                [
                    cryptoData.name,
                    cryptoData.last,
                    cryptoData.buy,
                    cryptoData.sell,
                    cryptoData.volume,
                    cryptoData.base_unit,
                ]
            );
        }

        console.log('Data successfully fetched and stored in database.');
    } catch (error) {
        console.error('Error fetching or storing data:', error);
    }
}

// Call the function to fetch and store data initially
fetchAndStoreData();

// Set up a timer to update data every 5 minutes (300000 milliseconds)
setInterval(fetchAndStoreData, 300000); 
